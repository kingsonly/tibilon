name: Properties
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/user/paymentreceipt/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Generate a payment receipt for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the payment receipt.'
        required: true
        example: 3
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "pdf_url": "URL_TO_GENERATED_PDF"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer kdVeD83a66av4cPf1EbgZh5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/user/addcommission/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Record agent commission payment for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 16
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amount:
        name: amount
        description: 'The commission amount.'
        required: true
        example: 3.898137243
        type: number
        enumValues: []
        custom: []
      modeOfPayment:
        name: modeOfPayment
        description: 'The payment mode (e.g., "Bank Transfer").'
        required: true
        example: sapiente
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      amount: 3.898137243
      modeOfPayment: sapiente
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Something went wrong, please retry."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": "Property not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer keEahbV38P5Dv6gZ46dfca1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/affiliate/addcommission/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Record agent commission payment for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 2
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amount:
        name: amount
        description: 'The commission amount.'
        required: true
        example: 1794.79217356
        type: number
        enumValues: []
        custom: []
      modeOfPayment:
        name: modeOfPayment
        description: 'The payment mode (e.g., "Bank Transfer").'
        required: true
        example: excepturi
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      amount: 1794.79217356
      modeOfPayment: excepturi
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Something went wrong, please retry."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": "Property not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer d35PZgvh68aak4V6fDb1eEc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/property
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a list of properties for a specific project.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      id:
        name: id
        description: 'The ID of the project.'
        required: true
        example: facere
        type: string
        enumValues: []
        custom: []
      page:
        name: page
        description: 'The page number (default: 1).'
        required: false
        example: 9
        type: integer
        enumValues: []
        custom: []
      per_page:
        name: per_page
        description: 'The number of results per page (default: 10).'
        required: false
        example: 7
        type: integer
        enumValues: []
        custom: []
    cleanQueryParameters:
      id: facere
      page: 9
      per_page: 7
    bodyParameters:
      id:
        name: id
        description: ''
        required: true
        example: et
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      id: et
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "status": "success",
             "data": [
                 {
                     "id": 1,
                     "name": "Property Name",
                     // ... other property properties
                     "amenity": [
                         {
                             "amenity_id": 1,
                             "amenity_name": "Amenity 1",
                             // ... other amenity properties
                         },
                         // ... other amenity objects
                     ],
                     "project": {
                         "id": 1,
                         "name": "Project Name",
                         // ... other project properties
                     }
                 },
                 // ... other property objects
             ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
             "status": "error",
             "message": "Ensure that all required fields are properly filled."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Df354hEe16adZvbg8Vk6cPa'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/property/create
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new property with amenities.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: multipart/form-data
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      project:
        name: project
        description: 'The ID of the project.'
        required: true
        example: 19
        type: integer
        enumValues: []
        custom: []
      name:
        name: name
        description: 'The name of the property.'
        required: true
        example: et
        type: string
        enumValues: []
        custom: []
      image:
        name: image
        description: 'The cover image of the property.'
        required: true
        example: null
        type: file
        enumValues: []
        custom: []
      description:
        name: description
        description: 'The description of the property.'
        required: true
        example: 'Incidunt voluptatem rerum excepturi voluptate quisquam amet rerum aliquid.'
        type: string
        enumValues: []
        custom: []
      amenities:
        name: amenities
        description: 'An array of amenities with their quantities.'
        required: true
        example: enim
        type: json
        enumValues: []
        custom: []
      amount:
        name: amount
        description: 'The amount of the property.'
        required: true
        example: qui
        type: decimal
        enumValues: []
        custom: []
    cleanBodyParameters:
      project: 19
      name: et
      description: 'Incidunt voluptatem rerum excepturi voluptate quisquam amet rerum aliquid.'
      amenities: enim
      amount: qui
    fileParameters:
      image: null
    responses:
      -
        status: 200
        content: |-
          {
             "status": "success",
             "message": "Property created successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
             "status": "error",
             "message": "Ensure that all required fields are properly filled."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6Zbe4kfcD15a8vEgdVaP36h'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/property/show/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the details of a property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: molestias
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: molestias
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "id": 1,
              "project": {
                  "id": 1,
                  "name": "Project Name"
              },
              "name": "Property Name",
              "image": "property-image.jpg",
              "description": "Property description.",
              "amenities": [
                  {
                      "id": 1,
                      "amenity": {
                          "id": 1,
                          "name": "Amenity Name"
                      },
                      "quantity": 2
                  }
              ],
              "payments": [],
              "client": {
                  "id": 1,
                  "client": {
                      "id": 1,
                      "name": "Client Name",
                      "email": "client@example.com",
                      "phone": "1234567890",
                      "client_type": "Type"
                  }
              },
              "agent": {
                  "id": 1,
                  "affiliates": [],
                  "users": []
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Could not find the specific property"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aa1kEZ4vDb8e36cfd5g6hVP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/property/update/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: multipart/form-data
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: sequi
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: sequi
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the property.'
        required: true
        example: possimus
        type: string
        enumValues: []
        custom: []
      image:
        name: image
        description: 'The image of the property.'
        required: true
        example: null
        type: file
        enumValues: []
        custom: []
      description:
        name: description
        description: 'The description of the property.'
        required: true
        example: 'Ut omnis voluptas sunt sint.'
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      name: possimus
      description: 'Ut omnis voluptas sunt sint.'
    fileParameters:
      image: null
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "message": "You have successfully updated the record"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Ensure that all required fields are properly filled"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "There are no properties with this property ID"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Something went wrong, please try again"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer g461d83EPe65VfvZckahDba'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/property/search
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Search for properties.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      query:
        name: query
        description: 'The search query to filter properties by name or description.'
        required: true
        example: porro
        type: string
        enumValues: []
        custom: []
      page:
        name: page
        description: 'The page number (default is 1).'
        required: false
        example: 11
        type: integer
        enumValues: []
        custom: []
      perpage:
        name: perpage
        description: 'The number of properties to show per page (default is 10).'
        required: false
        example: 15
        type: integer
        enumValues: []
        custom: []
    cleanQueryParameters:
      query: porro
      page: 11
      perpage: 15
    bodyParameters:
      query:
        name: query
        description: ''
        required: true
        example: esse
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      query: esse
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": [
                  {
                      "id": 1,
                      "name": "Property Name 1",
                      "description": "Description 1",
                      "project": {
                          "id": 1,
                          "name": "Project 1"
                      },
                      "amenity": [
                          {
                              "id": 1,
                              "name": "Amenity 1"
                          }
                      ]
                  },
                  // Additional property objects...
              ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Ensure that all required fields are properly filled"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "No records match your search."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer PgaEhv1c6akd5Ve6D384bZf'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/property/destroy/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property to delete.'
        required: true
        example: iusto
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: iusto
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "message": "Property has been deleted successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Could not delete this record, please retry after some time"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "The requested record does not exist"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer bdEf1av5ce6g6Zak4h3DPV8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/property/stats/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get statistics for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 2
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "data": {
                  "project": {
                      "property": {
                          "total_properties": 10,
                          "total_payments": 5,
                          "total_sold": 3,
                          "total_partially_sold": 2
                      }
                  }
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "data": {
                  "message": "Statistics not available for the property."
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer b8DV1aE6PZ5fhdg4v6kace3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/property/client/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the client associated with a property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 2
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "data": {
                  "id": 101,
                  "name": "Client Name",
                  "email": "client@example.com",
                  "phone": "123-456-7890",
                  "address": {
                      "full_address": "123 Main St, City",
                      "longitude": "123.456",
                      "latitude": "45.678"
                  },
                  "type": "Client Type",
                  "image": "/images/client/client_image.jpg"
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "There is presently no property with the above property ID."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6b4d83avZDhgVEaf6e51kPc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/property/addamenity
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Add a new amenity to a property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      property:
        name: property
        description: 'The ID of the property.'
        required: true
        example: 16
        type: integer
        enumValues: []
        custom: []
      amenity:
        name: amenity
        description: 'The ID of the amenity.'
        required: true
        example: 11
        type: integer
        enumValues: []
        custom: []
      quantity:
        name: quantity
        description: 'The quantity of the amenity.'
        required: true
        example: 9
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      property: 16
      amenity: 11
      quantity: 9
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
              "status": "success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Something went wrong, please try again."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer D5ZeP68dvafc643hEbVgka1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/property/updateamenity/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update a property's amenity."
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the property amenity.'
        required: true
        example: 15
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 15
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amenity:
        name: amenity
        description: 'The ID of the amenity.'
        required: true
        example: 19
        type: integer
        enumValues: []
        custom: []
      quantity:
        name: quantity
        description: 'The quantity of the amenity.'
        required: true
        example: 12
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      amenity: 19
      quantity: 12
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
              "status": "success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Ensure that all required fields are properly filled."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer b636ak4fcgde8vEahDV5P1Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/property/deleteamenity/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a property amenity.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property amenity.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Sorry, we could not delete this resource at this moment."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer fecV6gD4k1P3E8vdb5haa6Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/property/viewpayment/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'View a property payment by ID.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property payment.'
        required: true
        example: 18
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 18
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": {
                  "id": 1,
                  "payment": {
                      "id": 101,
                      "amount": 100.0,
                      "date": "2023-10-30"
                  },
                  "property": {
                      "id": 1001,
                      "name": "Property Name 1"
                  }
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "There is no payment with the provided ID."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dvEb4fc5agZ1P3kaehD66V8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/property/allpayment/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Retrieve all payments for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 6
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 6
    queryParameters:
      per_page:
        name: per_page
        description: 'The number of payments per page.'
        required: false
        example: 8
        type: integer
        enumValues: []
        custom: []
      page:
        name: page
        description: 'The page number for paginated results.'
        required: false
        example: 9
        type: integer
        enumValues: []
        custom: []
    cleanQueryParameters:
      per_page: 8
      page: 9
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success",
              "data": [
                  {
                      "id": 1,
                      "payment": {
                          "id": 101,
                          "amount": 100.0,
                          "date": "2023-10-30"
                      }
                  },
                  {
                      "id": 2,
                      "payment": {
                          "id": 102,
                          "amount": 150.0,
                          "date": "2023-10-31"
                      }
                  }
                  // Additional payment records
              ],
              "meta": {
                  "current_page": 1,
                  "per_page": 10,
                  "total": 5
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "This property currently has no payment."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer eP3486v6hc1dDfbgEZaa5Vk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/property/agent/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the agent associated with a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 8
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 8
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "data": {
                  "agent": {
                      "type": "Affiliate",
                      "details": {
                          // Affiliate-specific details
                      }
                  }
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
              "data": {
                  "agent": {
                      "type": "Employee",
                      "details": {
                          // Employee-specific details
                      }
                  }
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "data": {
                  "message": "No agent is associated with the property."
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "data": {
                  "message": "Property not found."
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 13Vbd8f6a54ackDEvPZhg6e'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/property/addcommission/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Record agent commission payment for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the property.'
        required: true
        example: 3
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      amount:
        name: amount
        description: 'The commission amount.'
        required: true
        example: 15.0
        type: number
        enumValues: []
        custom: []
      modeOfPayment:
        name: modeOfPayment
        description: 'The payment mode (e.g., "Bank Transfer").'
        required: true
        example: sed
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      amount: 15.0
      modeOfPayment: sed
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "status": "success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error",
              "message": "Something went wrong, please retry."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
              "status": "error",
              "message": "Property not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Eahcgfbk63a41e8V5vPZD6d'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/property/paymentreceipt/{id}'
    metadata:
      groupName: Properties
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Generate a payment receipt for a specific property.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the payment receipt.'
        required: true
        example: 7
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 7
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "pdf_url": "URL_TO_GENERATED_PDF"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
              "status": "error"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer DbEdVc6Z6f83khgv1Pea54a'
    controller: null
    method: null
    route: null
    custom: []
