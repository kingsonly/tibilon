name: 'User management'
description: |-

  APIs for managing basic site requirments such as login, logout, registration etc
endpoints:
  -
    httpMethods:
      - POST
    uri: api/user/login
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: kingsonly13c@gmail.com
        type: string
        enumValues: []
        custom: []
      password:
        name: password
        description: 'The password of the user.'
        required: true
        example: |-
          firstoctober
          This route is responsible for enabling a user to login into the system
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      email: kingsonly13c@gmail.com
      password: |-
        firstoctober
        This route is responsible for enabling a user to login into the system
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": {
               "name": "Prof. Morris Boehm",
               "token": "3|XyZ0nQXDCq4ZN8Z81ILGSvJMTRDDtGDMAXeWGip4",
               "email": "damion.mante@example.com",
               "status": "success",
               "message": "user logged in"
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/user/recoverpassword/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'This id is used to fetch the user from the database which password needs to be changed.'
        required: true
        example: accusamus
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: accusamus
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      password:
        name: password
        description: 'The password which would be saved as the new users password .'
        required: true
        example: firstoctober
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      password: firstoctober
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "password changed successfully",
           "data": {
               "id": 1,
               "name": "Gavin Abbott",
               "email": "noe.wisozk@example.org",
               "email_verified_at": "2023-05-06T04:05:23.000000Z",
               "passwordresetcode": 1683386423,
               "created_at": "2023-04-12T14:05:43.000000Z",
               "updated_at": "2023-05-06T15:20:23.000000Z"
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pd38V6cbEkv4aghZ516faDe'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/sendpasswordresetlink
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email used to send password reset link to a user .'
        required: true
        example: |-
          kings@gmail.com
          This route is responsible for sending password reset link to a user when the user wants to reset their password
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      email: |-
        kings@gmail.com
        This route is responsible for sending password reset link to a user when the user wants to reset their password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Please check your email for further instruction",
           "data": {
               "firstname": "Gavin Abbott",
               "link": "/recoverpassword/1683386125VJZ3625741"
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 65E6bP4Vf1hav8gkdDZeac3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "status": "success",
               "message": "subitems fetched with pagination",
               "data": {
                   "current_page": 10,
                   "data": [
                               {
                                   "id": 10,
                                   "name": "Darius Labadie",
                                   "email": "ckerluke@example.com",
                                   "email_verified_at": "2023-05-26T14:23:44.000000Z",
                                   "log_user_id": 1,
                                   "created_at": "2023-05-26T14:23:44.000000Z",
                                   "updated_at": "2023-05-26T14:23:44.000000Z"
                                },
                             {
                                   "id": 9,
                                   "name": "Ciara Schuppe",
                                   "email": "nhirthe@example.org",
                                   "email_verified_at": "2023-05-26T14:23:44.000000Z",
                                   "log_user_id": 1,
                                   "created_at": "2023-05-26T14:23:44.000000Z",
                                   "updated_at": "2023-05-26T14:23:44.000000Z"
                                   },
                              {
                                   "id": 8,
                                   "name": "Miss Adele Waelchi",
                                   "email": "valerie59@example.net",
                                   "email_verified_at": "2023-05-26T14:23:44.000000Z",
                                   "log_user_id": 1,
                                   "created_at": "2023-05-26T14:23:44.000000Z",
                                   "updated_at": "2023-05-26T14:23:44.000000Z"
                               },
                               {
                                   "id": 7,
                                   "name": "Miss Jailyn Hessel IV",
                                   "email": "lisa73@example.org",
                                   "email_verified_at": "2023-05-26T14:23:44.000000Z",
                                   "log_user_id": 1,
                                   "created_at": "2023-05-26T14:23:44.000000Z",
                                   "updated_at": "2023-05-26T14:23:44.000000Z"
                                }
                           ],
                           "first_page_url": "http://localhost:8080/api/user?page=1",
                           "from": 91,
                           "last_page": 10,
                           "last_page_url": "http://localhost:8080/api/user?page=10",
                           "links": [
                                       {
                                           "url": "http://localhost:8080/api/user?page=9",
                                           "label": "&laquo; Previous",
                                           "active": false
                                       },
                                       {
                                           "url": "http://localhost:8080/api/user?page=1",
                                           "label": "1",
                                           "active": false
                                           },
                                      {
                                           "url": "http://localhost:8080/api/user?page=2",
                                           "label": "2",
                                           "active": false
                                       },
                                       {
                                           "url": "http://localhost:8080/api/user?page=3",
                                                "label": "3",
                                           "active": false
                                       },
                                       {
                                           "url": "http://localhost:8080/api/user?page=4",
                                           "label": "4",
                                           "active": false
                                       },
                                   ],
                                   "next_page_url": null,
                                   "path": "http://localhost:8080/api/user",
                                   "per_page": 10,
                                   "prev_page_url": "http://localhost:8080/api/user?page=9",
                                   "to": 100,
                                   "total": 100
                                 },
                                 "totalpages": 10,
                                 "perpage": 10
                   }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer hfVegcPda65D1Eb3a86kv4Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/deleteuser/{id}'
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: 'This route is used by a user to destroy their account'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'The ID of the deleteuser.'
        required: true
        example: hic
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: hic
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "The user with 2 ID was deleted successfully"
          s}
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer k8c6g41h3EDv6bedfaaPZ5V'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/adduser
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: kingsonly13c@gmail.com
        type: string
        enumValues: []
        custom: []
      password:
        name: password
        description: 'The password of the user.'
        required: true
        example: firstoctober
        type: string
        enumValues: []
        custom: []
      firstname:
        name: firstname
        description: 'The firstname of the user.'
        required: true
        example: kingsley
        type: string
        enumValues: []
        custom: []
      lastname:
        name: lastname
        description: 'The lastname of the user.'
        required: true
        example: |-
          Achumie
          This route is responsible for enabling a user to register and create an account on the system
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      email: kingsonly13c@gmail.com
      password: firstoctober
      firstname: kingsley
      lastname: |-
        Achumie
        This route is responsible for enabling a user to register and create an account on the system
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "user created successfully",
           "data": {
               "email": "kingsonly13c@gmail.com",
               "name": "Kings Kings",
               "updated_at": "2023-04-14T15:28:27.000000Z",
               "created_at": "2023-04-14T15:28:27.000000Z",
               "id": 16,
               "reverse": 1681486107
             }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ec168Egh3dV5bvaDkPaf64Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/search
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      query:
        name: query
        description: ''
        required: true
        example: eligendi
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      query: eligendi
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer cdkehPab13v5DaVf8Eg4Z66'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user/logout
    metadata:
      groupName: 'User management'
      groupDescription: |-

        APIs for managing basic site requirments such as login, logout, registration etc
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer f58vVhdcE3gkeP61Dbaa64Z'
    controller: null
    method: null
    route: null
    custom: []
